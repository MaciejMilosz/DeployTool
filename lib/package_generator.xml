<?xml version="1.0"?>
<project name="packageGenerator" xmlns:sf="antlib:com.salesforce">
    
    <property name="metadataPropFileSrc" value="${sf.metadataFile}"/>
    <property name="stage.dir" value="src"/>
    <property name="target" value="package.xml"/>
    <property name="version" value="${sf.version}"/>

    <target name="generatePackage">
        <echo file="${stage.dir}/${target}"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><Package xmlns="http://soap.sforce.com/2006/04/metadata">]]></echo>
        <antcall target="generatePackageXMLBasedOnJSON"/>
        <echo file="${stage.dir}/${target}" append="true"><![CDATA[    <version>${version}</version></Package>]]></echo>
    </target>

    <target name="generatePackageXMLBasedOnJSON">
        <script language="javascript"> 
            <![CDATA[
             var version = java.lang.System.getProperty("java.version");
             if (version.startsWith("1.8.0")) {
                load("nashorn:mozilla_compat.js");
             }
             importPackage(java.io);

             try{
                var file = new File(project.getProperty('metadataPropFileSrc'));
                fr = new FileReader(file);
                br = new BufferedReader(fr);
                var json = '';
                line= br.readLine();
                while (line != null){
                    json += line;
                    line= br.readLine();
                }
                var metadataList = eval("(" + json + ")");

                for(i = 0; i < metadataList.length; i++){
                    ac = project.createTask("antcall");
                    if(metadataList[i].objtyp == "CustomLabels"){
                        ac.setTarget("generatePackageMembersLabels");
                    }else if(metadataList[i].objtyp == "Documents"){
                        ac.setTarget("generatePackageMembersDocuments");
                    }else{
                        ac.setTarget("generatePackageMembers");
                        param = ac.createParam();
                        param.setName("objtyp");
                        param.setValue(metadataList[i].objtyp);

                        param = ac.createParam();
                        param.setName("objext");
                        param.setValue(metadataList[i].objext);

                        param = ac.createParam();
                        param.setName("objdir");
                        param.setValue(metadataList[i].objdir);

                        param = ac.createParam();
                        param.setName("objflt");
                        param.setValue(metadataList[i].objflt);

                        param = ac.createParam();
                        param.setName("objexc");
                        param.setValue(metadataList[i].objexc);
                    }
                    ac.execute();
                }
             }catch(e){
                echo = project.createTask("echo");
                  echo.setMessage(e);
                  echo.setAppend(true);
                  echo.perform();
              } //Do nothing because folder might not exist, no issue
             ]]>
        </script>
    </target>
    
    <target name="generatePackageMembers">
        <script language="javascript"> 
            <![CDATA[
             var version = java.lang.System.getProperty("java.version");
             if (version.startsWith("1.8.0")) {
                load("nashorn:mozilla_compat.js");
             }
             importPackage(java.io);    

             try
             { 
               var objtyp = project.getProperty('objtyp');
               echo = project.createTask("echo");
               echo.setMessage('ObjectType: ' + objtyp);
               echo.setAppend(true);
               echo.perform();
               var objext = project.getProperty('objext');
               var objdir = project.getProperty('objdir');
               var objflt = project.getProperty('objflt');
               var objexc = project.getProperty('objexc');
               var stage  = project.getProperty('stage.dir');
               var target  = project.getProperty('target');


               var msg = '';
               msg+='\t<types>\n';

               fs = project.createDataType("fileset");
               fs.setDir( new File("./" + stage + "/" + objdir  +"/") );
               fs.setIncludes(objflt + "." + objext);
               fs.setExcludes(objexc);
               var basedir  = fs.getDir(project);

               ds = fs.getDirectoryScanner(project);
               var srcFiles = ds.getIncludedFiles();
                   
               
               for (i=0; i<srcFiles.length; i++) 
               {

                   var filename = srcFiles[i];
                   if(objtyp == 'AssignmentRule' || objtyp == 'EscalationRule')
                   {
                    var file = new File(basedir, filename);
                    var br       = new BufferedReader(new InputStreamReader(new DataInputStream(new FileInputStream(file))));
                    while ((line = br.readLine()) != null)   
                    {            
                        if (line.indexOf('<fullName>') > -1)
                        {
                          var objname = filename.substring(0,filename.indexOf("." + objext));       
                          msg+='<members>'+ objname + '.' + line.substring(line.indexOf('<fullName>') + 10,line.indexOf('</fullName>')) + '</members>\n';
                        }
                    }
                    continue;
                   }
                   filename = filename.substring(0,filename.indexOf("." + objext));       
                   msg+='\t\t<members>' + filename + '</members>\n';
               }
               msg+='\t\t<name>' + objtyp + '</name>\n';
               msg+='\t</types>\n';
               
               if(srcFiles.length > 0){
                   var file = new File('./' + stage + '/', target);
                   echo = project.createTask("echo");
                   echo.setMessage(msg);
                   echo.setAppend(true);
                   echo.setFile(file);
                   echo.perform();
               }
              }
              catch(e){
                echo = project.createTask("echo");
                echo.setMessage(e);
                echo.setAppend(true);
                echo.perform();
              } 
            ]]>
        </script>
    </target>

    <target name="generatePackageMembersDocuments">
        <script language="javascript"> 
            <![CDATA[
             var version = java.lang.System.getProperty("java.version");
             if (version.startsWith("1.8.0")) {
                load("nashorn:mozilla_compat.js");
             }
             importPackage(java.io);    

             try
             { 
               var stage  = project.getProperty('stage.dir');
               var target  = project.getProperty('target');

               var msg = '';
               msg+='\t<types>\n';

               fs = project.createDataType("fileset");
               fs.setDir( new File("./" + stage + "/documents/") );
               fs.setIncludes("*");
               var basedir  = fs.getDir(project);

               ds = fs.getDirectoryScanner(project);
               var srcDirs = ds.getIncludedDirectories();
                              
               for(i = 0; i < srcDirs.length; i++){
                    msg += '\t\t<members>' + srcDirs[i] + '</members>\n';
                    
                    fs = project.createDataType("fileset");
                    fs.setDir( new File("./" + stage + "/documents/" + srcDirs[i]) );
                    fs.setIncludes("*");
                    fs.setExcludes("*-meta.xml");
                    var basedir  = fs.getDir(project);
                    
                    ds = fs.getDirectoryScanner(project);
                    var srcFiles = ds.getIncludedFiles();
                    for (j=0; j<srcFiles.length; j++) 
                    {
                        msg += '\t\t<members>' + srcDirs[i] + '/' + srcFiles[j] + '</members>\n';
                    }
               }
               
               msg += '\t\t<name>Document</name>\n';
               msg += '\t</types>\n';
               
               var file = new File('./' + stage + '/', target);
               echo = project.createTask("echo");
               echo.setMessage(msg);
               echo.setAppend(true);
               echo.setFile(file);
               echo.perform();
              }
              catch(e){
                echo = project.createTask("echo");
                echo.setMessage(e);
                echo.setAppend(true);
                echo.perform();
              }
            ]]>
        </script>
    </target>
    
    <target name="generatePackageMembersLabels">
        <script language="javascript"> 
            <![CDATA[
                try{
                var version = java.lang.System.getProperty("java.version");
                if (version.startsWith("1.8.0")) {
                    load("nashorn:mozilla_compat.js");
                }

                importPackage(java.io);
                var stage  = project.getProperty('stage.dir');
                var target  = project.getProperty('target');
                fs = project.createDataType("fileset");
                fs.setDir( new File("./" + stage + "/labels/") );
                fs.setIncludes("CustomLabels.labels");
                fs.setExcludes(".svn");

                var basedir  = fs.getDir(project);
                ds = fs.getDirectoryScanner(project);
                var srcFiles = ds.getIncludedFiles();

                var strEcho  = '';
                strEcho+='\n\t<types>\n';
                for (i = 0; i < srcFiles.length; i++) {
                    var filename = srcFiles[i];
                    var file = new File(basedir, filename);
                    var b        = false;
                    var br       = new BufferedReader(new InputStreamReader(new DataInputStream(new FileInputStream(file))));
                    while ((line = br.readLine()) != null){
                        if (line.indexOf('<labels>' ) > -1){b=true ;}
                        if (line.indexOf('</labels>') > -1){b=false;}
                        if (b==true){
                            if (line.indexOf('<fullName>') > -1){
                            strEcho+='\t\t<members>'+ line.substring(line.indexOf('<fullName>') + 10,line.indexOf('</fullName>')) + '</members>\n';
                            b=false;
                            }
                        }
                    }
                }  

                strEcho+='\t\t<name>CustomLabel</name>\n';
                strEcho+='\t</types>\n';
                var file2 = new File('./' + stage + '/', target);
                echo = project.createTask("echo");
                echo.setMessage(strEcho);
                echo.setFile(file2);
                echo.setAppend(true);
                echo.perform();
                strEcho='';
                } 
                catch(e){
                    echo = project.createTask("echo");
                    echo.setMessage(e);
                    echo.setAppend(true);
                    echo.perform();
                }
                ]]>
        </script>
    </target>
</project>